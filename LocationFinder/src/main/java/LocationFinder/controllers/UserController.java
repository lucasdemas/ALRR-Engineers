package LocationFinder.controllers;

import LocationFinder.repositories.UserRepository;
import LocationFinder.models.User;
import LocationFinder.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private UserService userServ;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/getID")
    public ResponseEntity<?> getByID(@RequestParam(value = "user_id", required = false) Integer user_id,
                                     @RequestParam(value = "user_name", required = false) String username,
                                     @RequestParam(value = "user_email", required = false) String email) {
        List<User> result = userServ.getUsersByTemplate(user_id, username, email);
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @PostMapping(path = "/postUser")
    public ResponseEntity<?> postUser(@RequestBody User newUser) {
        List<User> result = userServ.postUser(newUser);
        return new ResponseEntity<>(result, HttpStatus.CREATED);
    }
}